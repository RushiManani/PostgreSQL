-- Day 2 Exercise 1

	Select DISTINCT customer_id,amount
	from payment
	where amount>=7.99

-- Day 2 Exercise 2

	select * from film
	
	Select title, rental_rate, replacement_cost 
	from film
	where rental_rate>2.99 OR replacement_cost>19.99

-- Day 3 Exercise 1

	Select title, replacement_cost, rental_duration
	from film
	where rental_duration BETWEEN 4 AND 6
	Order by replacement_cost DESC
	LIMIT 100;

-- Day 3 Exercise 2

	Select title, rating, length,description
	from film
	where rating IN('G','PG')
	AND length>120
	AND description LIKE '%Action%';

-- Day 4 Exercise 2

	select * from actor
	
	Select first_name,count(*)
	from actor
	group by first_name
	order by first_name

-- Day 5 Exercise 1

	select * from film
	select * from language
	
	select f.title as movie,l.name as language,f.rental_rate
	from film f join language l
	on f.language_id=l.language_id

-- Day 5 Exercise 2

	--table : actor,film,film_actor

	select * from actor
	select * from film
	select * from film_actor

	select a.first_name as actor,count(f.title) as movies_actor_act
	from actor a
	join film_actor fa on a.actor_id=fa.actor_id 
	join film f on f.film_id=fa.film_id
	group by a.first_name

-- Day 5 Exercise 3

	-- Different ratings of all movies, count of movies that have been rented for each rating
	-- Table : film - rating,film_id,
			-- rental - rental_id,inventory_id,customer_id,staff_id,
			-- inventory - inventory_id,film_id

	select * from film
	select * from rental
	select * from inventory

	select f.rating,count(f.title)
	from film f
	join inventory i on f.film_id=i.film_id
	join rental r on i.inventory_id=r.inventory_id
	group by f.rating

-- Day 6 Exercise 1

	select * from rental
	select * from customer
	-- rental_date,return_date,first_name,last_name,email

	select c.first_name,c.last_name,c.email,date_part('day',age(r.return_date,r.rental_date)) as days
	from customer c
	join rental r on c.customer_id=r.customer_id
	where date_part('day',age(r.return_date,r.rental_date))>=7
	order by days desc

-- Day 6 Exercise 2

	select * from film
	-- title

	select title,substr(title,11),substr(title,16),length(title),substr(title,6,3),substr(title,6,1)
	from film

-- Day 7 Exercise 1

	select * from payment
	select * from customer

	select first_name || ' ' || last_name as CustomerName,email,SUM(amount) as TotalRental,
	CASE
		when SUM(amount)>200 then 'Elite'
		when SUM(amount)>150 then 'Platinum'
		when SUM(amount)>100 then 'Gold'
		else 'Silver'
	END
	from customer c
	join payment p on c.customer_id=p.customer_id
	GROUP BY CustomerName,email

-- Day 7 Exercise 2

	Create View CustomerCategoryBasedonTotalRent
	AS
		select first_name || ' ' || last_name as CustomerName,email,SUM(amount) as TotalRental,
		CASE
			when SUM(amount)>200 then 'Elite'
			when SUM(amount)>150 then 'Platinum'
			when SUM(amount)>100 then 'Gold'
			else 'Silver'
		END AS "Category"
		from customer c
		join payment p on c.customer_id=p.customer_id
		GROUP BY CustomerName,email

	Drop View CustomerCategoryBasedonTotalRent

	Select * from CustomerCategoryBasedonTotalRent


-- ### Functions ###

	-- CREATE [OR REPLACE] FUNCTION function_name(param_list)
	-- RETURNS return_type
	-- LANGUAGE plpgsql
	-- AS
	-- $$
	-- DECLARE
	-- 		variable declaration
	-- BEGIN
	--		logic
	-- END;
	-- $$;

		select * from film

		-- Creating a Function	
		CREATE OR REPLACE FUNCTION get_film_count(len_from INT,len_to INT)
		RETURNS INT
		LANGUAGE plpgsql
		AS
		$$
		DECLARE
			film_count INTEGER;
		BEGIN
			Select count(*)
			INTO film_count
			FROM film
			WHERE length BETWEEN len_from AND len_to;
	
			RETURN film_count;
		END;
		$$;
	
		-- Executing a Function
		Select get_film_count(40,90)


-- ### PROCUDURE ###
	
	create table accounts (
	    id int generated by default as identity,
	    name varchar(100) not null,
	    balance dec(15, 2) not null,
	    primary key(id)
	);
	
	insert into accounts(name, balance)
	values('Raju', 10000);
	insert into accounts(name, balance)
	values('Nikhil', 10000);
	
	select * from accounts;

	-- Creating a Procedure
	CREATE OR REPLACE PROCEDURE transfer(
		sender INT,
		receiver INT,
		amount DECIMAL 
	)
	language plpgsql
	as
	$$
	begin
		
		update accounts
		set balance = balance - amount
		where id = sender;

		update accounts
		set balance = balance + amount
		where id = receiver;

		commit;
	end;
	$$;

	-- Executing a Stored Procedure
	call transfer(1,2,1000);

	select * from accounts


-- ### Trigger ###

	CREATE TABLE COMPANY(
	   ID INT PRIMARY KEY NOT NULL,
	   NAME TEXT NOT NULL,
	   AGE INT NOT NULL,
	   ADDRESS CHAR(50),
	   SALARY REAL
	);

	CREATE TABLE AUDIT(
	   EMP_ID INT NOT NULL,
	   ENTRY_DATE TEXT NOT NULL
	);

	CREATE OR REPLACE FUNCTION auditlog()
	RETURNS TRIGGER
	LANGUAGE plpgsql
	AS
	$$
	BEGIN
	   INSERT INTO AUDIT(EMP_ID, ENTRY_DATE) VALUES (NEW.ID, current_timestamp);
	   RETURN NEW;
	END;
	$$;

	--Creating a Trigger
	CREATE TRIGGER example_trigger 
	AFTER INSERT
	ON COMPANY
	FOR EACH ROW 
	EXECUTE FUNCTION auditlog();

	INSERT INTO COMPANY (ID, NAME, AGE, ADDRESS, SALARY)
	VALUES (1, 'Raju', 25, 'New-Delhi', 33000.00 );

	SELECT * FROM COMPANY;
	SELECT * FROM AUDIT;








